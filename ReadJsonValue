package genie;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.security.cert.X509Certificate;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONArray;
import org.json.JSONObject;

public class GetAllDetails {
	static HttpsURLConnection conn = null;
	static String[] reportArr;
	static String reportId;
	static List<String> reportDetails;
	static Map<String, Object[]> testCaseDetails = new TreeMap<String, Object[]>();
	public static int rowCount = 2;
	static String tc_PASS, tc_FAIL, tc_BLOCK, tc_OTHER, execution_DAY;

	public static void main(String[] args) throws Exception {
		System.out.println("Please enter execution day and hit ENTER key from keyboard :");
		Scanner in = new Scanner(System.in);
		execution_DAY = in.nextLine();
		/*
		 * testCaseDetails.put("1", new Object[] { "SL NO","Channel",
		 * "Screen / Service", "Feature File", "TestCaseId", "Description",
		 * "Priority", "Tester", "Planned", "Executed", "Pass", "Failed",
		 * "Blocked", "Pending", "Remarks", "Report", "Retain Status",
		 * "Duration", "Day" });
		 */
		testCaseDetails.put("1", new Object[] { "SL NO", "TestCaseId", "Desc","Pass", "Failed", "Blocked", "Pending", "Report","Retain Status", "Duration", "Day" });
		List<String> reportUrl = readTxtFile();
		for (String url : reportUrl) {
			reportArr = url.split("reports/");
			reportId = reportArr[1].split("/")[0];
			getReport(reportId);
		}
		writeToExcel();
	}

	public static void executionStatusUpdate(String status) {
		tc_BLOCK = "0";
		tc_FAIL = "0";
		tc_PASS = "0";
		tc_OTHER = "0";
		if (status.equalsIgnoreCase("passed"))
			tc_PASS = "1";
		else if (status.equalsIgnoreCase("failed"))
			tc_FAIL = "1";
		else if (status.equalsIgnoreCase("blocked"))
			tc_BLOCK = "1";
		else
			tc_OTHER = "1";
	}

	public static void writeData(String data) {
		String filePath = System.getProperty("user.dir") + "/Log/GenieReport_Output.txt";
		File file = new File(filePath);
		try (FileWriter fw = new FileWriter(file, true);
				BufferedWriter bw = new BufferedWriter(fw);
				PrintWriter out = new PrintWriter(bw)) {
			out.println(data);
		} catch (IOException e) {
			System.out.println("Issue in writeData");
			System.out.println(e.getMessage());
		}
	}

	public static List<String> readTxtFile() {
		List<String> reportId = new ArrayList<String>();
		String filePath = System.getProperty("user.dir") + "/Log/GenieReport.txt";
		try {
			Scanner scanner = new Scanner(new File(filePath));
			while (scanner.hasNextLine()) {
				reportId.add(scanner.nextLine());
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return reportId;
	}

	public static void writeToExcel() throws IOException {
		@SuppressWarnings("resource")
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("AutomationPack_Report");

		XSSFRow row;
		Set<String> keyid = testCaseDetails.keySet();
		int rowid = 0;
		for (String key : keyid) {
			row = spreadsheet.createRow(rowid++);
			Object[] objectArr = testCaseDetails.get(key);
			int cellid = 0;
			System.out.println(objectArr.length);
			for (Object obj : objectArr) {
				Cell cell = row.createCell(cellid++);
				cell.setCellValue((String) obj);
			}
		}
		FileOutputStream out = new FileOutputStream(
				new File(System.getProperty("user.dir") + "/Log/GenieReportDetails.xlsx"));
		workbook.write(out);
		out.close();
	}

	public static String getTimeDiff(String startTime, String endTime) throws ParseException {
		String newstime = startTime.split("T")[1].replace("Z", "");
		String newetime = endTime.split("T")[1].replace("Z", "");
		SimpleDateFormat inputFormat = new SimpleDateFormat("HH:mm:ss.SSS");
		Date start = inputFormat.parse(newstime);
		Date end = inputFormat.parse(newetime);
		long duration = end.getTime() - start.getTime();
		long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration) % 60;
		long diffInMinutes = TimeUnit.MILLISECONDS.toMinutes(duration);
		return Long.toString(diffInMinutes) + "m " + Long.toString(diffInSeconds) + "s";

	}

	public static String getTimeDiffInSec(String startTime, String endTime) throws ParseException {
		String newstime = startTime.split("T")[1].replace("Z", "");
		String newetime = endTime.split("T")[1].replace("Z", "");
		SimpleDateFormat inputFormat = new SimpleDateFormat("HH:mm:ss.SSS");
		Date start = inputFormat.parse(newstime);
		Date end = inputFormat.parse(newetime);
		long duration = end.getTime() - start.getTime();
		long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(duration);
		return Long.toString(diffInSeconds);

	}

	public static String getRetainStatus(String reportId) throws Exception {
		String retainStatus = "";
		String getUrl = "https://gorest.co.in/public/v2/users/" + reportId;
		try {

			URL url = new URL(getUrl);
			conn = (HttpsURLConnection) url.openConnection();
			TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
					return null;
				}

				public void checkClientTrusted(X509Certificate[] certs, String authType) {
				}

				public void checkServerTrusted(X509Certificate[] certs, String authType) {
				}
			} };
			SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, trustAllCerts, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HostnameVerifier allHostsValid = new HostnameVerifier() {
				public boolean verify(String hostname, SSLSession session) {
					return true;
				}
			};
			HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
			conn = (HttpsURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			conn.setRequestProperty("User-Agent", "Mozilla/5.0");
			BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			JSONObject myResponse = new JSONObject(response.toString());
			retainStatus = myResponse.getString("reportState");

			conn.disconnect();
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			if (conn != null)
				conn.disconnect();
		}
		return retainStatus;

	}

	public static void getReport(String reportId) throws Exception {
		reportDetails = new ArrayList<>();
		String getUrl = "https://gorest.co.in/public/v2/users/" + reportId + "/fragments";
		String reportUrl = "https://gorest.co.in/public/v2/users/" + reportId + "/summary";
		try {

			URL url = new URL(getUrl);
			conn = (HttpsURLConnection) url.openConnection();
			TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
					return null;
				}

				public void checkClientTrusted(X509Certificate[] certs, String authType) {
				}

				public void checkServerTrusted(X509Certificate[] certs, String authType) {
				}
			} };
			SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, trustAllCerts, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HostnameVerifier allHostsValid = new HostnameVerifier() {
				public boolean verify(String hostname, SSLSession session) {
					return true;
				}
			};
			HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
			conn = (HttpsURLConnection) url.openConnection();
			conn.setRequestMethod("POST");
			conn.setRequestProperty("User-Agent", "Mozilla/5.0");
			int responseCode = conn.getResponseCode();
			System.out.println("\nSending 'GET' request to URL : " + url);
			System.out.println("Response Code : " + responseCode);
			BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			JSONObject myResponse = new JSONObject(response.toString());
			JSONArray record = myResponse.getJSONArray("records");
			int pageTotal = (int) myResponse.get("pageTotal");
			String feature = record.getJSONObject(0).getJSONObject("feature").get("name").toString();
			System.out.println(feature);
			System.out.println("--" + record.length());
			for (int i = 0; i < record.length(); i++) {
				JSONObject recordObject = record.getJSONObject(i).getJSONObject("scenario");
				JSONObject recordObject2 = record.getJSONObject(i).getJSONObject("scenario").getJSONObject("result");
				String status = recordObject2.get("status").toString();
				executionStatusUpdate(status);
				String startTime = "";
				String endTime = "";
				String timeDiff = "";
				String secDiff = "";
				if (status.equalsIgnoreCase("passed") || status.equalsIgnoreCase("failed")) {
					startTime = recordObject2.get("startDate").toString();
					endTime = recordObject2.get("endDate").toString();
					timeDiff = getTimeDiff(startTime, endTime);
					secDiff = getTimeDiffInSec(startTime, endTime);
				}
				String scenario = (String) recordObject.get("name");
				String[] test = scenario.split("]");
				String id = test[0].trim().substring(1, test[0].length());
				String desc = test[1];
				System.out.println(status + ";" + id + ";" + desc + ";" + reportUrl);
				System.out.println("Execution Time in min and sec" + timeDiff);
				System.out.println("Execution Time in sec" + secDiff);
				writeData(feature + ";" + status + ";" + timeDiff + ";" + secDiff + ";" + id + ";" + desc + ";"
						+ reportUrl + ";" + getRetainStatus(reportId));
				/*testCaseDetails.put(Integer.toString(rowCount),
						new Object[] { String.valueOf(rowCount), "RICHUI", feature, feature, id, desc, "P1",
								"Tester Name", "1", "1", tc_PASS, tc_FAIL, tc_BLOCK, tc_OTHER, "rmk", reportUrl,
								getRetainStatus(reportId), secDiff, String.valueOf(execution_DAY) });*/
				testCaseDetails.put(Integer.toString(rowCount),
						new Object[] { String.valueOf(rowCount), id,desc, tc_PASS, tc_FAIL, tc_BLOCK, tc_OTHER,reportUrl,getRetainStatus(reportId), secDiff, String.valueOf(execution_DAY) });
				rowCount++;
			}
			conn.disconnect();
			if (pageTotal > 0) {
				for (int i = 1; i < pageTotal; i++) {
					getReport(reportId, Integer.toString(i));
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			if (conn != null)
				conn.disconnect();
		}

	}

	public static void getReport(String reportId, String pageNumber) throws Exception {
		reportDetails = new ArrayList<>();
		String getUrl = "https://gorest.co.in/public/v2/users/details/" + reportId + "/fragments?pageNum="
				+ pageNumber;
		String reportUrl = "https://gorest.co.in/public/v2/users/" + reportId + "/summary";
		try {

			URL url = new URL(getUrl);
			conn = (HttpsURLConnection) url.openConnection();
			TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
					return null;
				}

				public void checkClientTrusted(X509Certificate[] certs, String authType) {
				}

				public void checkServerTrusted(X509Certificate[] certs, String authType) {
				}
			} };
			SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, trustAllCerts, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			HostnameVerifier allHostsValid = new HostnameVerifier() {
				public boolean verify(String hostname, SSLSession session) {
					return true;
				}
			};
			HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
			conn = (HttpsURLConnection) url.openConnection();
			conn.setRequestMethod("POST");
			conn.setRequestProperty("User-Agent", "Mozilla/5.0");
			int responseCode = conn.getResponseCode();
			System.out.println("\nSending 'GET' request to URL : " + url);
			System.out.println("Response Code : " + responseCode);
			BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			JSONObject myResponse = new JSONObject(response.toString());
			JSONArray record = myResponse.getJSONArray("records");
			String feature = record.getJSONObject(0).getJSONObject("feature").get("name").toString();
			System.out.println(feature);
			System.out.println("--" + record.length());
			for (int i = 0; i < record.length(); i++) {
				JSONObject recordObject = record.getJSONObject(i).getJSONObject("scenario");
				JSONObject recordObject2 = record.getJSONObject(i).getJSONObject("scenario").getJSONObject("result");
				String status = recordObject2.get("status").toString();
				executionStatusUpdate(status);
				String startTime = "";
				String endTime = "";
				String timeDiff = "";
				String secDiff = "";
				if (status.equalsIgnoreCase("passed") || status.equalsIgnoreCase("failed")) {
					startTime = recordObject2.get("startDate").toString();
					endTime = recordObject2.get("endDate").toString();
					timeDiff = getTimeDiff(startTime, endTime);
					secDiff = getTimeDiffInSec(startTime, endTime);
				}
				String scenario = (String) recordObject.get("name");
				String[] test = scenario.split("]");
				String id = test[0].trim().substring(1, test[0].length());
				String desc = test[1];
				System.out.println(status + ";" + id + ";" + desc + ";" + reportUrl);
				writeData(feature + ";" + status + ";" + timeDiff + ";" + secDiff + ";" + id + ";" + desc + ";"
						+ reportUrl + ";" + getRetainStatus(reportId));
				/*testCaseDetails.put(Integer.toString(rowCount),
						new Object[] { String.valueOf(rowCount), "RICHUI", feature, feature, id, desc, "P1",
								"Tester Name", "1", "1", tc_PASS, tc_FAIL, tc_BLOCK, tc_OTHER, "rmk", reportUrl,
								getRetainStatus(reportId), secDiff, String.valueOf(execution_DAY) });*/
				testCaseDetails.put(Integer.toString(rowCount),
						new Object[] { String.valueOf(rowCount), id,desc, tc_PASS, tc_FAIL, tc_BLOCK, tc_OTHER,reportUrl,getRetainStatus(reportId), secDiff, String.valueOf(execution_DAY) });
				rowCount++;
			}
			conn.disconnect();
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			if (conn != null)
				conn.disconnect();
		}

	}
}
