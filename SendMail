package mail;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.Properties;

import javax.crypto.spec.SecretKeySpec;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.ssl.TrustStrategy;

public class Mail {
	// private static String BASE_URL

	

	
	
	static String country = System.getProperty("COUNTRY", "{env.COUNTRY}");
	static String env = System.getProperty("ENVIRONMENT", "{env.ENVIRONMENT}");
	static String REPORT_FILE_NAME;
	static String REPORT_FILE_PATH;

	public static void main(String[] args) throws IOException {
		//System.out.println(getAbsolutePath());
		//ackReport();
		 sendMail("TEST");
		/*
		 * LocalDateTime myDateObj = LocalDateTime.now(); DateTimeFormatter
		 * myFormatObj = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
		 * System.out.println(myDateObj.format(myFormatObj));
		 */
	}

	public static void ackReport() throws UnsupportedEncodingException, IOException{
		if (!getAbsolutePath().isEmpty()){
		DateFormat dateformat = new SimpleDateFormat("dd-MM-yyyy-HHmm");
		REPORT_FILE_NAME = dateformat.format(new Date());
		REPORT_FILE_PATH = System.getProperty("user.dir") + "/results/Report_Summary/HealthCheck_Test_Summary_"
				+ country + "_" + env + ".html";
		renameReport(REPORT_FILE_PATH);
		sendMail("Test");
		addAttachmentToConfluence();
		}
		else{
			System.out.println("Report File Not created");
		}
		
	}
	
	public static void renameReport(String reportFileName) {
		System.out.println("Inside renameReport");
		
		String reportFile = reportFileName;
		Path source = new File(reportFile).toPath();
		try {
			REPORT_FILE_NAME = REPORT_FILE_NAME + "_" + source.getFileName();
			System.out.println("REPORT_FILE_NAME:"+REPORT_FILE_NAME);
			//Files.move(source, source.resolveSibling(REPORT_FILE_NAME));
			Files.copy(source, source.resolveSibling(REPORT_FILE_NAME),StandardCopyOption.REPLACE_EXISTING);
		} catch (IOException e) {
			System.out.println("Issue in renaming report");
			e.printStackTrace();
		}

	}

	public static void moveReportFile() throws IOException {
		String source = System.getProperty("user.dir") + "/results/Report_Summary/";
		String destination = System.getProperty("user.dir") + "/results/Report_BackUp/";
		System.out.println("Inside move report");
		File sourceFolder = new File(source);
		File destinationFolder = new File(destination);
		if (sourceFolder.exists() && sourceFolder.isDirectory()) {
			File[] listOfFiles = sourceFolder.listFiles();
			if (listOfFiles != null) {
				for (File child : listOfFiles) {
					String newFile = destinationFolder + "\\BKP_" + child.getName();
					Files.move(Paths.get(child.getAbsolutePath()), Paths.get(newFile).resolve(newFile),
							StandardCopyOption.REPLACE_EXISTING);
					System.out.println("Report moved to backup folder - " + child.getName());
				}
			}
		} else {
			System.out.println(sourceFolder + "  Folder does not exists");
		}

	}

	@SuppressWarnings("deprecation")
	public static String readReport() throws IOException {
		String reportAsString = null;
		String reportFile = System.getProperty("user.dir") + "/results/Report_Summary/"+REPORT_FILE_NAME;
		StringWriter writer = new StringWriter();
		try {
			IOUtils.copy(new FileInputStream(new File(reportFile)), writer);
			reportAsString = writer.toString();
			writer.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			IOUtils.closeQuietly(writer);

		}
		return reportAsString;

	}

	public static void sendMail(String mailSubject) throws UnsupportedEncodingException, IOException {


		DateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");
		Date da = new Date();
		String currentDate = dateformat.format(da);
		mailSubject = " Screen Health Check | " + country + "_" + env + " | " + currentDate;
		Properties props = new Properties();
		props.put("mail.smtp.auth", "false");
		props.put("mail.smtp.ssl.trust", "*");
		props.put("mail.smtp.host", "mailhost.gdc.standardchartered.com");

		Session session = Session.getInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				/*byte[] credDecoded = Base64.getDecoder().decode(ENCRYPTED_CREDENTIAL);
				String credentials = new String(credDecoded, StandardCharsets.UTF_8);
				return new PasswordAuthentication(credentials.split(":", 0).toString(),
						credentials.split(":", 1).toString());*/
				return new PasswordAuthentication(USERID,PASSWORD);
			}
		});

		try {

			Message message = new MimeMessage(session);

			InternetAddress[] to = InternetAddress.parse(receipients);
			InternetAddress[] cc = InternetAddress.parse(ccAddress);
			message.setFrom(new InternetAddress("krvivekpatel@outlook", "ATLAS SANITY", "UTF8"));
			message.setRecipients(Message.RecipientType.TO, to);
			message.setRecipients(Message.RecipientType.CC, cc);
			message.setSubject(mailSubject);
			message.setText("TEST");

			/*MimeBodyPart messageBodyPart = new MimeBodyPart();
			Multipart multipart = new MimeMultipart();
			BodyPart htmlBodyPart = new MimeBodyPart();
			htmlBodyPart.setContent(readReport(), "text/html; charset=UTF-8");
			multipart.addBodyPart(htmlBodyPart);
			message.setContent(multipart);*/
			Transport.send(message);
			System.out.println("Email sent");
		} catch (MessagingException e) {
			throw new RuntimeException(e);
		}
	}

	private static String getAbsolutePath() {
		String absolutePath = null;
		final File file = new File(System.getProperty("user.dir") + "/results/Report_Summary");
		for (final File fileEntry : file.listFiles()) {
			if (fileEntry.isFile()) {
				if (fileEntry.getName().contains(country) && fileEntry.getName().contains(env)) {
					System.out.println("Absolute path :" + fileEntry.getAbsolutePath());
					absolutePath = fileEntry.getAbsolutePath();
					break;
				} else {
					System.out.println("File not found to upload");
				}

			}
		}
		return absolutePath;
	}

	public static void addAttachmentToConfluence() {
		System.out.println("Inside confluence uploader");
		String fullfilename = getAbsolutePath();
		// String jira_attachment_baseURL =
		// String jira_attachment_baseURL = BASE_URL;
		CloseableHttpClient httpclient = (CloseableHttpClient) CreateHttpClient_AcceptsUntrustedCerts();
		HttpPost httppost = new HttpPost(BASE_URL);
		httppost.setHeader("X-Atlassian-Token", "nocheck");
		httppost.setHeader("Authorization", "Basic " + ENCRYPTED_CREDENTIAL);
		File fileToUpload = new File(fullfilename);
		FileBody fileBody = new FileBody(fileToUpload);
		HttpEntity entity = MultipartEntityBuilder.create().addPart("file", fileBody).build();
		httppost.setEntity(entity);
		CloseableHttpResponse response = null;

		try {
			response = httpclient.execute(httppost);
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				httpclient.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		if (response.getStatusLine().getStatusCode() == 200)
			System.out.println("**** File Uploaded :: " + fullfilename);
		else
			System.out.println(response.getStatusLine().getStatusCode() + "\n " + response.toString());

	}

	private static HttpClient CreateHttpClient_AcceptsUntrustedCerts() {
		HttpClientBuilder b = HttpClientBuilder.create();

		// setup a Trust Strategy that allows all certificates.
		//
		SSLContext sslContext = null;
		try {
			sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy() {
				public boolean isTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
					return true;
				}
			}).build();
		} catch (KeyManagementException | NoSuchAlgorithmException | KeyStoreException e) {
			e.printStackTrace();
		}
		b.setSslcontext(sslContext);

		// don't check Hostnames, either.
		// -- use SSLConnectionSocketFactory.getDefaultHostnameVerifier(), if
		// you don't want to weaken
		HostnameVerifier hostnameVerifier = SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;

		// here's the special part:
		// -- need to create an SSL Socket Factory, to use our weakened "trust
		// strategy";
		// -- and create a Registry, to register it.
		//
		SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(sslContext, hostnameVerifier);
		Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()
				.register("http", PlainConnectionSocketFactory.getSocketFactory()).register("https", sslSocketFactory)
				.build();

		// now, we create connection-manager using our Registry.
		// -- allows multi-threaded use
		PoolingHttpClientConnectionManager connMgr = new PoolingHttpClientConnectionManager(socketFactoryRegistry);
		b.setConnectionManager(connMgr);

		// finally, build the HttpClient;
		// -- done!
		HttpClient client = b.build();
		return client;
	}

}
